<!DOCTYPE html>
<html>
  <head>
    <title>Murakami Motifs</title>
    <script src="./jquery.min.js"></script> 
    <script src="./jquery.sticky.js"></script>
    <script src="./d3.v3.min.js"></script>
    <script src="./d3.tip.min.js"></script>
    <script> 
    $(document).ready(function(){
      $("#buttons").sticky({topSpacing:20});
      $("#explanation").sticky({topSpacing:80});
      window.addEventListener("keydown", function(e) {
      if (e.keyCode == 191)
      $("#explanation").css("opacity", $("#explanation").css("opacity") == 1 ? 0 : 1);
  })
    });
  </script>
    <style type="text/css">
    .axis path,
    .axis line {
    fill: none;
    stroke: #000;
    shape-rendering: crispEdges;
    }
    .x.axis path {
    display: none;
    }

    .bar:hover {
    stroke-width: 2;
    stroke: black;
    }

    .d3-tip {
    font: Optima;
    line-height: 1;
    font-weight: bold;
    padding: 12px;
    background: rgba(0, 0, 0, 0.8);
    color: #fff;
    border-radius: 2px;
    }

     /*Creates a small triangle extender for the tooltip */
    .d3-tip:after {
    box-sizing: border-box;
    display: inline;
    font-size: 10px;
    width: 100%;
    line-height: 1;
    color: rgba(0, 0, 0, 0.8);
    content: "\25BC";
    position: absolute;
    text-align: center;
    }

     /*Style northward tooltips differently */
    .d3-tip.n:after {
    margin: -1px 0 0 0;
    top: 100%;
    left: 0;
    }

  .sent {
  position: absolute;
  top:80px;
  left: 20px;
}

  .explanation {
    position: absolute;
    top:80px;
    left:20px;
    width:724px;
    padding: 10px 10px 10px 10px;
    background: #E5F5E0;
    border: 2px solid #555555;
  }


svg {
  font: 10px sans-serif;
  shape-rendering: crispEdges;
}
form {
  position: absolute;
  left: 20px;
  top: 20px;
  padding: 10px 10px 10px 10px;
  font: 500 12pt Optima;
  display: block;
  background: #E5F5E0;
  border: 2px solid #555555;
}
    </style>
  </head>
  <body>
    <form id="buttons">
    <label><input type="radio" name="mode" value="cats" class="styled" checked> Cats  </label>
    <label><input type="radio" name="mode" value="wells" class="styled"> Wells  </label>
    <label><input type="radio" name="mode" value="train stations" class="styled"> Train Stations  </label>
    <label><input type="radio" name="mode" value="noodles" class="styled"> Noodles  </label>
    <label><input type="radio" name="mode" value="jazz" class="styled"> Jazz  </label>
    <label><input type="radio" name="mode" value="classical" class="styled"> Classical  </label>
    <label><input type="radio" name="mode" value="war" class="styled"> War  </label>
    <label><input type="radio" name="mode" value="ears" class="styled"> Ears  </label>
    <label><input type="radio" name="mode" value="coffee" class="styled"> Coffee  </label>
    <label><input type="radio" name="mode" value="vanishing" class="styled"> Vanishing  </label>
    </form>
    <script type="text/javascript">

var w = 1750,
    h = 800,
    p = [80, 10, 50, 50],
    z = d3.scale.ordinal().range([d3.rgb(166, 206, 227), d3.rgb(31, 120, 180), d3.rgb(178, 223, 138), d3.rgb(51, 160, 44), d3.rgb(251, 154, 153), d3.rgb(227, 26, 28), d3.rgb(253, 191, 111), d3.rgb(255, 127, 0), d3.rgb(202, 178, 214), d3.rgb(106, 61, 154)]);
    var barWidth = 6;
    var barPadding = 1;
    var vScale = 6;
    var selection = "cats";
    books = ["Pinball, 1973", "Hard-Boiled Wonderland and the End of the World", "Norwegian Wood", "Dance Dance Dance", "The Wind-Up Bird Chronicle", "Kafka on the Shore", "After Dark", "1Q84"];
    motifs = ["cats", "wells", "train stations", "noodles", "jazz", "classical", "war", "ears", "coffee", "vanishing"]

    var explanation = d3.select("body").append("div")
    .attr("id", "explanation")
    .attr("class", "explanation")
    .attr("dy", ".35em")
    .style("color", d3.rgb(0,0,0))
    .style("font", "400 14px Optima")
    .html("This is a visualization of common motifs in novels by Haruki Murakami. Inspired by <a href=http://www.incidentalcomics.com/2012/06/haruki-murakami-bingo.html>Murakami Bingo</a> and the author himself. Please allow time to load. Toggle among motifs above. The novels are in reverse chronological order (scroll down to see more!). Longer novels may be wider than your screen (e.g. <i>1Q84</i>). Each colored bar represents a block of 100 sentences from one novel. Mouse over the bar to see the number of times a motif was mentioned in that sentence block. Click to see an example sentence. Press ? to toggle this info. Enjoy and read Murakami! Created by <a href=mailto:nbilenko@berkeley.edu>Natalia Bilenko</a>.");

    var tip_num = d3.tip()
    .attr('class', 'd3-tip')
    .offset([-10, 0])
    .html(function(d) {
    return "<strong><span style='color:red'>"+d.motif+": </span></strong>" + +d.y;
    });

    var svg = d3.select("body").append("svg:svg")
            .attr("width", w + p[1] + p[3])
            .attr("height", h + p[0] + p[2])
            .append("svg:g");

    svg.call(tip_num);

    var text = svg.selectAll("text")
    .data(books)
    .enter().append("svg:text")
    .attr("x", p[1])
    .attr("y", function(d, i) { return h +p[0]+10 - i*100; })
    .attr("text-anchor", "left")
    .attr("text-align", "left")
    .attr("dy", ".35em")
    .style("color", d3.rgb(50,50,50))
    .style("font", "500 16px Chaparral Pro")
    .text(function(d) { return d; });

    var sent = d3.select("body").append("div")
    .attr("id", "sentence")
    .attr("class", "sent")
    .attr("dy", ".35em")
    .style("color", d3.rgb(50,50,50))
    .style("font", "500 14px Optima");

d3.csv("murakami.csv", function(murakami) {
  var data = murakami.map(function(d){
    return {
    bookname: d.book,
    motif: d.motif,
    x: +d.block,
    y: +d.number,
    sentence: d.sentence
  };
});

  var rect = svg.selectAll("rect")
      .data(data)
    .enter().append("svg:rect")
    .attr("class", "bar")
      .attr("x", function(d){
                    return p[1]+d.x*barWidth;
                })
      .attr("y", function(d) { return h + p[0] - books.indexOf(d.bookname)*100- vScale*(d.y); })
      .attr("fill", function(d) {
        return z(motifs.indexOf(d.motif)); 
      })
      .attr("height", function(d) { return  vScale*d.y; })
      .attr("width", barWidth-barPadding)
      .on('mouseover', tip_num.show)
      .on('mouseout', tip_num.hide)
      .on('click', function(d) { sent.style("top", h + p[0] + 180 - books.indexOf(d.bookname)*100 + "px").html("<strong><span style='color:red'>" + d.motif + ":</span> " + d.sentence); });
    
    var line = svg.selectAll("line")
    .data(data)
    .enter().append("svg:line")
    .attr("x1", function(d){
      return p[1]+d.x*barWidth;
    })
    .attr("x2", function(d){
      return p[1]+(d.x+1)*barWidth;
    })
    .attr("y1", function(d) { return h + p[0] - books.indexOf(d.bookname)*100;})
    .attr("y2", function(d) { return h + p[0] - books.indexOf(d.bookname)*100;})
    .style("stroke", "#000")
    .style("stroke-width", 2)
    .style("opacity", .5);

  d3.selectAll("input").on("change", change);

  var timeout = setTimeout(function() {
    d3.select("input[value=\"cats\"]").property("checked", true).each(change);
  }, 2000);

  function change() {
    clearTimeout(timeout);
    transitionPlot(this.value);
  }

  function transitionPlot(selection) {
    d3.selectAll("rect")
    .transition()
    .duration(1500)
    .attr("opacity", function(d) { if (d.motif == selection)
        { return 1.0}
        else { return 0.0}; })
    .attr("visibility", function(d) { if (d.motif == selection)
        { return "visible"}
        else { return "hidden"}; });
  };
});

    </script>
  </body>
</html>
